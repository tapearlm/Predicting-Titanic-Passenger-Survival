}
train.raw$Age <- as.factor(train.raw$Age)
train.raw$Age <- as.factor(train.raw$Age[1])
train.raw$Age[[1]]
train.raw$Age[1]
train.raw$Age[][1]
train.raw$Age[1,]
train.raw$Age[,1]
k <- getAge(train.raw, "Dr")
k <- getAge(missingAgeData, "Dr")
str(k)
k <- as.numeric(k)
str(k)
source('~/.active-rstudio-document', echo=TRUE)
str(train.raw)
getFare <- function(dat, class){
medClass <- dat%>%
filter(Pclass == class)%>%
select(Fare)%>%
summarise(median(Fare, na.rm = TRUE))%>%
as.numeric()
return(medClass)
}
## impute missings on Fare feature with median fare by Pclass
train.raw$Fare[ which(train.raw$Fare == 0 )] <- NA
for (i in 1:length(train.raw[[1]])){
if (is.na(train.raw[i,]$Fare)){
k <- train.raw[i,]
train.raw[i,]$Fare <- getFare(train.raw, train.raw[i,]$Pclass)
}
}
summary(train.raw$Fare)
train <- train.raw
remove(train.raw)
remove(missingAgeData)
View(train)
source('~/.active-rstudio-document', echo=TRUE)
remove(train.raw)
remove(missingAgeData)
View(train)
train.raw%>%
ggplot() + aes(Age) + geom_histogram(aes(fill = Age))  + theme(legend.position="none") + labs(title = "Age Distribution", x = "Age", y = "Count")
source('~/.active-rstudio-document', echo=TRUE)
train.raw%>%
ggplot() + aes(Age) + geom_histogram(aes(fill = Age))  + theme(legend.position="none") + labs(title = "Age Distribution", x = "Age", y = "Count")
train.raw%>%
ggplot() + aes(Age) + geom_histogram(aes(fill = Survived))  + theme(legend.position="none") + labs(title = "Age Distribution", x = "Age", y = "Count")
train.raw%>%
ggplot() + aes(Age) + geom_histogram(aes(fill = Survived)) + labs(title = "Age Distribution", x = "Age", y = "Count")
train.raw%>%
ggplot() + aes(Age) + geom_histogram(aes(fill = Survived), binwidth = 5) + labs(title = "Age Distribution", x = "Age", y = "Count")
train.raw%>%
ggplot() + aes(Age) + geom_histogram(aes(fill = Survived), binwidth = 3) + labs(title = "Age Distribution", x = "Age", y = "Count")
train.raw%>%
ggplot() + aes(Age) + geom_histogram(aes(fill = Survived), binwidth = 2) + labs(title = "Age Distribution", x = "Age", y = "Count")
train.raw%>%
ggplot() + aes(Age) + geom_histogram(aes(fill = Survived), binwidth = 1) + labs(title = "Age Distribution", x = "Age", y = "Count")
train.raw%>%
ggplot() + aes(Age) + geom_histogram(aes(fill = Survived), binwidth = 2) + labs(title = "Age Distribution", x = "Age", y = "Count")
help(regexpr)
help("str_extract")
getFamName <- function(data) {
pattern <- regex("^(.+?),")
data$FamName <- str_extract(data$Name, pattern)
return(data$FamName)
}
train.raw$FamName <- getFamName(train.raw)
View(train.raw)
k <- "abc"
length(k)
nchar(k)
getFamName <- function(data) {
pattern <- regex("^(.+?),")
data$FamName <- str_extract(data$Name, pattern)%>%
gsub(",", "", .)
return(data$FamName)
}
train.raw$FamName <- getFamName(train.raw)
help(filter)
getfamSurvival <- function(data){
for (i in 1:length(train.raw[[1]])){
if ((train.raw[i,]$Age < 16) & (train.raw[i,]$SibSp > 0)){
sibData <- data%>%
filter((identical(famName, train.raw[i,]$FamName)) & (SibSp ==train.raw[i,]$SibSp))
if(1 %in% sibData$Survived){
train.raw[i,]$famSurvival <- 1
}
else{
train.raw[i,]$famSurvival <- 0
}
}
else if(identical(train.raw[i,]$Sex, "female") & (train.raw[i,]$Parch > 0)){
childData <- data%>%
filter((Age <= 16) & identical(famName, train.raw[i,]$FamName) & (Parch <= train.raw[i,]$Parch))
if(1 %in% childData$Survived){
train.raw[i,]$famSurvival <- 1
}
else{
train.raw[i,]$famSurvival <- 0
}
}
else{
train.raw[i,]$famSurvival <- 0
}
}
}
train.raw <- getfamSurvival(train.raw)
getfamSurvival <- function(data){
for (i in 1:length(train.raw[[1]])){
if ((train.raw[i,]$Age < 16) & (train.raw[i,]$SibSp > 0)){
sibData <- data%>%
filter((identical(famName, train.raw[i,]$FamName)) & (SibSp ==train.raw[i,]$SibSp))
if(1 %in% sibData$Survived){
train.raw[i,]$famSurvival <- 1
}
else{
train.raw[i,]$famSurvival <- 0
}
}
else if(identical(train.raw[i,]$Sex, "female") & (train.raw[i,]$Parch > 0)){
childData <- data%>%
filter((Age <= 16) & identical(FamName, train.raw[i,]$FamName) & (Parch <= train.raw[i,]$Parch))
if(1 %in% childData$Survived){
train.raw[i,]$famSurvival <- 1
}
else{
train.raw[i,]$famSurvival <- 0
}
}
else{
train.raw[i,]$famSurvival <- 0
}
}
}
train.raw <- getfamSurvival(train.raw)
getfamSurvival <- function(data){
for (i in 1:length(train.raw[[1]])){
if ((train.raw[i,]$Age < 16) & (train.raw[i,]$SibSp > 0)){
sibData <- data%>%
filter((identical(FamName, train.raw[i,]$FamName)) & (SibSp ==train.raw[i,]$SibSp))
if(1 %in% sibData$Survived){
train.raw[i,]$famSurvival <- 1
}
else{
train.raw[i,]$famSurvival <- 0
}
}
else if(identical(train.raw[i,]$Sex, "female") & (train.raw[i,]$Parch > 0)){
childData <- data%>%
filter((Age <= 16) & identical(FamName, train.raw[i,]$FamName) & (Parch <= train.raw[i,]$Parch))
if(1 %in% childData$Survived){
train.raw[i,]$famSurvival <- 1
}
else{
train.raw[i,]$famSurvival <- 0
}
}
else{
train.raw[i,]$famSurvival <- 0
}
}
}
train.raw <- getfamSurvival(train.raw)
getfamSurvival <- function(data){
for (i in 1:length(train.raw[[1]])){
if ((train.raw[i,]$Age < 16) & (train.raw[i,]$SibSp > 0)){
sibData <- data%>%
filter((identical(FamName, train.raw[i,]$FamName)) & (SibSp ==train.raw[i,]$SibSp))
if(1 %in% sibData$Survived){
train.raw[i,]$famSurvival <- 1
}
else{
train.raw[i,]$famSurvival <- 0
}
}
else if(identical(train.raw[i,]$Sex, "female") & (train.raw[i,]$Parch > 0)){
childData <- data%>%
filter((Age <= 16) & identical(FamName, train.raw[i,]$FamName) & (Parch <= train.raw[i,]$Parch))
if(1 %in% childData$Survived){
train.raw[i,]$famSurvival <- 1
}
else{
train.raw[i,]$famSurvival <- 0
}
}
else{
train.raw[i,]$famSurvival <- 0
}
}
}
train.raw$famSurvival <- getfamSurvival(train.raw)
getfamSurvival <- function(passenger, data){
if ((passenger$Age < 16) & (passenger$SibSp > 0)){
sibData <- data%>%
filter((identical(FamName, passenger$FamName)) & (SibSp ==passenger$SibSp))
if(1 %in% sibData$Survived){
famSurvival <- 1
}
else{
famSurvival <- 0
}
}
else if(identical(passenger$Sex, "female") & (passenger$Parch > 0)){
childData <- data%>%
filter((Age <= 16) & identical(FamName, passenger$FamName) & (Parch <= passenger$Parch))
if(1 %in% childData$Survived){
famSurvival <- 1
}
else{
famSurvival <- 0
}
}
else{
famSurvival <- 0
}
return(famSurvival)
}
getfamSurvival <- function(passenger, data){
if ((passenger$Age < 16) & (passenger$SibSp > 0)){
sibData <- data%>%
filter((identical(FamName, passenger$FamName)) & (SibSp ==passenger$SibSp))
if(1 %in% sibData$Survived){
famSurvival <- 1
}
else{
famSurvival <- 0
}
}
else if(identical(passenger$Sex, "female") & (passenger$Parch > 0)){
childData <- data%>%
filter((Age <= 16) & identical(FamName, passenger$FamName) & (Parch <= passenger$Parch))
if(1 %in% childData$Survived){
famSurvival <- 1
}
else{
famSurvival <- 0
}
}
else{
famSurvival <- 0
}
return(famSurvival)
}
train.raw <- train.raw%>%
mutate(famSurvival = 0)
getfamSurvival <- function(passenger, data){
if ((passenger$Age < 16) & (passenger$SibSp > 0)){
sibData <- data%>%
filter((identical(FamName, passenger$FamName)) & (SibSp ==passenger$SibSp))
if(1 %in% sibData$Survived){
famSurvival <- 1
}
else{
famSurvival <- 0
}
}
else if(identical(passenger$Sex, "female") & (passenger$Parch > 0)){
childData <- data%>%
filter((Age <= 16) & identical(FamName, passenger$FamName) & (Parch <= passenger$Parch))
if(1 %in% childData$Survived){
famSurvival <- 1
}
else{
famSurvival <- 0
}
}
else{
famSurvival <- 0
}
return(famSurvival)
}
train.raw <- train.raw%>%
mutate(FamSurvival = 0)
for (i in 1:length(train.raw[[1]])){
train.raw[i,]$FamSurvival <- getfamSurvival(train.raw[i,], train.raw)
}
##Copying Curt Wehrley's code
## function for extracting honorific (i.e. title) from the Name feature
getTitle <- function(data) {
title.dot.start <- regexpr("\\,[A-Z ]{1,20}\\.", data$Name, TRUE)
title.comma.end <- title.dot.start + attr(title.dot.start, "match.length")-1
data$Title <- substr(data$Name, title.dot.start+2, title.comma.end-1)
return (data$Title)
}
train.raw$Title <- getTitle(train.raw)
unique(train.raw$Title)
getAge <- function(dat, title){
medAge <- dat%>%
filter(Title == title)%>%
summarise(median(Age, na.rm = TRUE))%>%
as.numeric()
return(medAge)
}
missingAgeData <- train.raw%>%
filter(Title %in% missingTitles)
for (i in 1:length(train.raw[[1]])){
if (is.na(train.raw[i,]$Age)){
train.raw[i,]$Age <- getAge(missingAgeData, train.raw[i,]$Title)
}
}
train.raw$Embarked[which(is.na(train.raw$Embarked))] <- 'S'
getFare <- function(dat, class){
medClass <- dat%>%
filter(Pclass == class)%>%
select(Fare)%>%
summarise(median(Fare, na.rm = TRUE))%>%
as.numeric()
return(medClass)
}
## impute missings on Fare feature with median fare by Pclass
train.raw$Fare[ which(train.raw$Fare == 0 )] <- NA
for (i in 1:length(train.raw[[1]])){
if (is.na(train.raw[i,]$Fare)){
k <- train.raw[i,]
train.raw[i,]$Fare <- getFare(train.raw, train.raw[i,]$Pclass)
}
}
train <- train.raw
missmap(train.raw, main = "Missing Titanic Data",
col=c("red", "beige"), ylabels = NULL, y.at = NULL)
#Loading the necessary packages
library(plyr)
library(dplyr)
library(ggplot2)
library(knitr)
library(markdown)
library(stringr)
library(tidyr)
library(Amelia)
library(vcd)
library(corrgram)
library(Hmisc)
#Retrieving the data from the github repository
train.raw <- read.csv(url("https://raw.github.com/tapearlm/Predicting-Titanic-Passenger-Survival/master/train.csv"), na.strings = c("NA", ""))
#Changing variables to desired type
train.raw$Name <- as.character(train.raw$Name)
train.raw$Survived<- as.factor(train.raw$Survived)
train.raw$Pclass <- as.factor(train.raw$Pclass)
train.raw$PassengerId <- as.factor(train.raw$PassengerId)
train.raw%>%
ggplot() + aes(Survived) + geom_bar(aes(fill = Survived))+ scale_x_discrete(labels = c("Perished", "Survived")) + theme(legend.position="none") + labs(title = "Survival Count", x = "", y = "Count")
train.raw%>%
ggplot() + aes(Pclass) + geom_bar(aes(fill = Pclass))  + theme(legend.position="none") + labs(title = "Class Distribution", x = "Class", y = "Count")
train.raw%>%
ggplot() + aes(Sex) + geom_bar(aes(fill = Sex))  + theme(legend.position="none") + labs(title = "Gender Distribution", x = "Gender", y = "Count")
train.raw%>%
ggplot() + aes(Age) + geom_histogram(aes(fill = Survived), binwidth = 2) + labs(title = "Age Distribution", x = "Age", y = "Count")
train.raw%>%
ggplot() + aes(Fare) + geom_histogram(aes(fill = Fare))  + theme(legend.position="none") + labs(title = "Fare Distribution", x = "Fare", y = "Count")
train.raw%>%
ggplot() + aes(Embarked) + geom_bar(aes(fill = Embarked))  + theme(legend.position="none") + labs(title = "Port Embarked From", x = "Port", y = "Count") + scale_x_discrete(labels = c("Cherbourg", "Queenstown", "Southampton", "Unknown"))
bystats(train.raw$Age, train.raw$Title)
missingTitles <- c("Dr", "Master", "Mrs", "Miss", "Mr")
corrgram.data <- train.raw
## change features of factor type to numeric type for inclusion on correlogram
corrgram.data$Survived <- as.numeric(corrgram.data$Survived)
corrgram.data$Pclass <- as.numeric(corrgram.data$Pclass)
corrgram.data$Embarked <- revalue(corrgram.data$Embarked, c("C" = 1, "Q" = 2, "S" = 3))
## generate correlogram
corrgram.vars <- c("Survived", "Pclass", "Sex", "Age",
"SibSp", "Parch", "Fare", "Embarked")
corrgram(corrgram.data[,corrgram.vars], order=FALSE,
lower.panel=panel.ellipse, upper.panel=panel.pie,
text.panel=panel.txt, main="Titanic Training Data")
mosaicplot(train.raw$Pclass ~ train.raw$Survived,
main="Passenger Fate by Traveling Class", shade=FALSE,
color=TRUE, xlab="Pclass", ylab="Survived")
mosaicplot(train.raw$Sex ~ train.raw$Survived,
main="Passenger Fate by Gender", shade=FALSE, color=TRUE,
xlab="Gender", ylab="Survived")
mosaicplot(train.raw$Embarked ~ train.raw$Survived,
main="Passenger Fate by Port of Embarkation",
shade=FALSE, color=TRUE, xlab="Embarked", ylab="Survived")
getFamName <- function(data) {
pattern <- regex("^(.+?),")
data$FamName <- str_extract(data$Name, pattern)%>%
gsub(",", "", .)
return(data$FamName)
}
train.raw$FamName <- getFamName(train.raw)
getfamSurvival <- function(passenger, data){
if ((passenger$Age < 16) & (passenger$SibSp > 0)){
sibData <- data%>%
filter((identical(FamName, passenger$FamName)) & (SibSp ==passenger$SibSp))
if(1 %in% sibData$Survived){
famSurvival <- 1
}
else{
famSurvival <- 0
}
}
else if(identical(passenger$Sex, "female") & (passenger$Parch > 0)){
childData <- data%>%
filter((Age <= 16) & identical(FamName, passenger$FamName) & (Parch <= passenger$Parch))
if(1 %in% childData$Survived){
famSurvival <- 1
}
else{
famSurvival <- 0
}
}
else{
famSurvival <- 0
}
return(famSurvival)
}
train.raw <- train.raw%>%
mutate(FamSurvival = 0)
for (i in 1:length(train.raw[[1]])){
train.raw[i,]$FamSurvival <- getfamSurvival(train.raw[i,], train.raw)
}
train.raw%>%
select(Age)%>%
summary()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(train.raw)
length(train.raw[[1]])
train.raw[i,]
getfamSurvival(train.raw[i,], train.raw)
str(train.raw)
train.raw[298,]
k <- train.raw%>%
filter(identical(FamName, train.raw[298,]$FamName))
View(k)
k <- train.raw%>%
filter(!grepl(FamName, train.raw[298,]$FamName))
help(filter_)
k <- train.raw%>%
filter_(train.raw[298,]$FamName)
k <- train.raw%>%
filter_(FamName == train.raw[298,]$FamName)
k <- train.raw%>%
filter_(identical(FamName,train.raw[298,]$FamName))
k <- train.raw%>%
filter_(FamName,train.raw[298,]$FamName))
k <- train.raw%>%
filter_(FamName %in% train.raw[298,]$FamName)
k <- train.raw%>%
filter(FamName %in% train.raw[298,]$FamName)
View(k)
string <- train.raw[298,]$FamName
k <- train.raw%>%
filter(FamName %in% c(string))
View(k)
k <- train.raw%>%
filter(FamName %in% c(train.raw[298,]$FamName))
string <- train.raw[298,]$FamName
k <- train.raw%>%
filter(FamName %in% string)
getfamSurvival <- function(passenger, data){
if ((passenger$Age < 16) & (passenger$SibSp > 0)){
string <- passenger$FamName
sibData <- data%>%
filter((FamName %in% string) & (SibSp == passenger$SibSp))
if(1 %in% sibData$Survived){
famSurvival <- 1
}
else{
famSurvival <- 0
}
}
else if(identical(passenger$Sex, "female") & (passenger$Parch > 0)){
string <- passenger$FamName
childData <- data%>%
filter((Age <= 16) & (FamName %in% string) & (Parch <= passenger$Parch))
if(1 %in% childData$Survived){
famSurvival <- 1
}
else{
famSurvival <- 0
}
}
else{
famSurvival <- 0
}
return(famSurvival)
}
for (i in 1:length(train.raw[[1]])){
train.raw[i,]$FamSurvival <- getfamSurvival(train.raw[i,], train.raw)
}
install.packages("caret")
library(caret)
train <- train.raw
remove(train.raw)
remove(missingAgeData)
set.seed(23)
training.rows <- createDataPartition(train$Survived,
p = 0.8, list = FALSE)
train.batch <- train[training.rows, ]
test.batch <- train[-training.rows, ]
help(glm)
View(train.batch)
Titanic.logit.1 <- glm(Fate ~ Sex + Class + Age + FamSurvival + Embarked + Fare,
data = train.batch, family=binomial("logit"))
Titanic.logit.1 <- glm(Survived ~ Sex + Class + Age + FamSurvival + Embarked + Fare,
data = train.batch, family=binomial("logit"))
Titanic.logit.1 <- glm(Survived ~ Sex + Pclass + Age + FamSurvival + Embarked + Fare,
data = train.batch, family=binomial("logit"))
Titanic.logit.1
anova(Titanic.logit.1, test="Chisq")
Titanic.logit.1 <- glm(Survived ~ Sex + Pclass + Age + FamSurvival + Embarked,
data = train.batch, family=binomial("logit"))
Titanic.logit.1
anova(Titanic.logit.1, test="Chisq")
Titanic.logit.1 <- glm(Survived ~ Sex + Pclass + Age + FamSurvival,
data = train.batch, family=binomial("logit"))
Titanic.logit.1
Titanic.logit.1 <- glm(Survived ~ Sex + Pclass + Age + FamSurvival + Embarked,
data = train.batch, family=binomial("logit"))
Titanic.logit.1
